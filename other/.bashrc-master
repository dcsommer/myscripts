#!/bin/bash
# This file should be sourced by the local .bashrc and should hold all the
# functionality of what would normally go in .bashrc

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Get the directory of this file (other bash files we source are in the
# same directory)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# jsettlers
alias settlers="cd ~/Games/jsettlers-1.0.6/; ./playSettlers.bashrc; cd -"

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f $DIR"/.bash_aliases" ]; then
    . $DIR"/.bash_aliases"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

####SEQUOIA DEVELOPMENT SECTION####

sqroot=/home/dcsommer/Documents/sequoia-dev-trunk # The root dev directory
# Must locate the xerces xml parser to build the Sequoia compiler
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$sqroot/src/external/xercesc/lib

# Needed to compile Sequoia files. We add a few things to the path and set
# some environment variables.
export PATH=$PATH:$sqroot/bin                     # The location of the sq++ binary
export SQ_RT_DIR=$sqroot/runtime                  # Paths that generated code will
export SQ_LD_DIR=$sqroot/apps/external            #   assume to exist

function doresearch {
    cd ~/Documents
    gedit notes.txt &
    cd sequoia-dev-trunk
    emacs src/common/gsop/src/target/generic_target_vector.cc &
    emacs src/common/berkeley/src/elsa/cc.ast.gen.h &
    emacs runtime/vector/include/sq_vector_intrinsics.h &
}

function makesequoia {
    cd ~/Documents/sequoia-dev-trunk
    rm bin/sqcc
    make
    cd -
}

function benchmark-sequoia-app {
    cd out
    echo "Running 4 warmup runs"
    for i in {1..4}
    do
        ./sq.out
    done
    echo "Collecting data for 10 runs"
    for i in {1..10}
    do
        ./sq.out | grep "running time:" >> experiments.txt
    done
    echo "experiment_name,usec,GFLOPS,GB/s" > experiments2.txt
#Example line in experiments.txt:
#Sequoia total matrixmult running time: 588125.0000 usec -- 0.0571 GFLOPS -- 0.0008 GB/s
    awk '/Sequoia total / {print $3 "," $6 "," $9 "," $12}
     END {}' experiments.txt >> experiments2.txt
    rm experiments.txt
    mv experiments2.txt ../experiments.txt
}

####END SEQUOIA DEVELOPMENT SECTION####

# My own custom development helpers
function grepheaders {
    grep --include="*.h" -ri $1 *
}
export CLASSPATH=/home/dcsommer/Dropbox/Documents/2010-2011/Winter/cs255/proj2_trunk